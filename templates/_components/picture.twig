{#
# Advanced Responsive Picture Component  
#
# A sophisticated picture component that automatically generates responsive images
# with multiple formats, retina support, and performance optimizations using the
# <picture> element with multiple <source> tags for optimal format delivery.
#
# Single Image Mode Props:
#   img: Asset (required for single image mode) - The image asset to render
#   class: string (default: '') - CSS classes for the img element
#   sizes: string (default: '100vw') - Sizes attribute for responsive images
#   formats: array (default: from config) - Image formats to generate ['webp', 'jpeg']
#   alt: string (default: img.alt || img.title) - Alt text for accessibility
#   lazy: boolean (default: false) - Enable lazy loading
#   priority: boolean (default: false) - Set fetchpriority="high" for above-fold images
#   responsive: object (required) - Responsive breakpoint configuration
#
# Desktop/Mobile Mode Props:
#   desktopImg: Asset - Desktop image asset (for art-direction scenarios)
#   mobileImg: Asset - Mobile image asset (for art-direction scenarios)
#   breakpoint: string (default: '768px') - Media query breakpoint between mobile/desktop
#   desktopSizes: string (default: '100vw') - Sizes attribute for desktop image
#   mobileSizes: string (default: '100vw') - Sizes attribute for mobile image
#   desktopResponsive: object - Responsive config for desktop image
#   mobileResponsive: object - Responsive config for mobile image
#   (All other props apply to both images)
#
# Responsive Config Example:
#   responsive: {
#     sm: { mode: 'crop', width: 400, height: 300, quality: 85, position: 'center-center' },
#     md: { mode: 'crop', width: 800, height: 400, quality: 85, position: 'center-center' },
#     lg: { mode: 'crop', width: 1200, height: 800, quality: 85, position: 'center-center' }
#   }
#
# Single Image Usage:
#   {{ ui.component('picture', {
#     img: entry.cardImage.one(),
#     class: 'hero-image w-full h-full object-cover',
#     sizes: '100vw', 
#     formats: ['webp'],
#     lazy: true,
#     responsive: {
#       sm: { mode: 'crop', width: 400, height: 300, quality: 85, position: 'center-center' },
#       md: { mode: 'crop', width: 800, height: 400, quality: 85, position: 'center-center' },
#       lg: { mode: 'crop', width: 1200, height: 800, quality: 85, position: 'center-center' }
#     }
#   }) }}
#
# Desktop/Mobile Usage (Art-Direction):
#   {{ ui.component('picture', {
#     desktopImg: entry.desktopImage.one(),
#     mobileImg: entry.mobileImage.one(),
#     breakpoint: '768px',
#     class: 'hero-image w-full h-full object-cover',
#     formats: ['webp'],
#     lazy: true,
#     desktopResponsive: {
#       md: { mode: 'crop', width: 1920, height: 440, quality: 90, position: 'center-center' },
#       lg: { mode: 'crop', width: 3840, height: 880, quality: 90, position: 'center-center' }
#     },
#     mobileResponsive: {
#       sm: { mode: 'crop', width: 750, height: 800, quality: 90, position: 'center-center' }
#     }
#   }) }}
#}

{% set defaults = {
  img: null,
  desktopImg: null,
  mobileImg: null,
  breakpoint: '768px',
  class: '',
  sizes: '100vw',
  desktopSizes: null,
  mobileSizes: null,
  formats: null,
  alt: null,
  lazy: false,
  priority: false,
  responsive: {},
  desktopResponsive: null,
  mobileResponsive: null
} %}

{% set p = defaults|merge(props ?? {}) %}

{# Determine if we're in desktop/mobile mode or single image mode #}
{% set isDesktopMobileMode = p.desktopImg or p.mobileImg %}

{% if isDesktopMobileMode %}
  {# Desktop/Mobile Art-Direction Mode #}
  {% set transformConfig = craft.app.config.getConfigFromFile('transforms') %}
  {% set configFormats = p.formats ?? transformConfig.formats %}
  {% set enableRetina = transformConfig.enableRetina %}
  
  {# Set up sizes attributes with fallbacks #}
  {% set desktopSizes = p.desktopSizes ?? p.sizes %}
  {% set mobileSizes = p.mobileSizes ?? p.sizes %}
  
  {# Set up responsive configs with fallbacks #}
  {% set desktopResponsive = p.desktopResponsive ?? p.responsive %}
  {% set mobileResponsive = p.mobileResponsive ?? p.responsive %}
  
  {# Determine primary image and alt text #}
  {% set primaryImg = p.desktopImg ?? p.mobileImg %}
  {% set altText = p.alt ?? primaryImg.alt ?? primaryImg.title %}
  
  {# Generate transforms for desktop image #}
  {% set desktopTransforms = {} %}
  {% if p.desktopImg and desktopResponsive %}
    {% for format in configFormats %}
      {% for size, settings in desktopResponsive %}
        {% set key = size ~ '_1x_' ~ format %}
        {% set transform1x = {
          mode: settings.mode,
          width: settings.width,
          height: settings.height ?? 'auto',
          quality: settings.quality,
          position: settings.position,
          format: format
        } %}
        {% set desktopTransforms = desktopTransforms|merge({(key): transform1x}) %}
        
        {% if enableRetina %}
          {% set key2x = size ~ '_2x_' ~ format %}
          {% set transform2x = {
            mode: settings.mode,
            width: settings.width * 2,
            height: settings.height is defined ? settings.height * 2 : 'auto',
            quality: settings.quality,
            position: settings.position,
            format: format
          } %}
          {% set desktopTransforms = desktopTransforms|merge({(key2x): transform2x}) %}
        {% endif %}
      {% endfor %}
    {% endfor %}
  {% endif %}
  
  {# Generate transforms for mobile image #}
  {% set mobileTransforms = {} %}
  {% if p.mobileImg and mobileResponsive %}
    {% for format in configFormats %}
      {% for size, settings in mobileResponsive %}
        {% set key = size ~ '_1x_' ~ format %}
        {% set transform1x = {
          mode: settings.mode,
          width: settings.width,
          height: settings.height ?? 'auto',
          quality: settings.quality,
          position: settings.position,
          format: format
        } %}
        {% set mobileTransforms = mobileTransforms|merge({(key): transform1x}) %}
        
        {% if enableRetina %}
          {% set key2x = size ~ '_2x_' ~ format %}
          {% set transform2x = {
            mode: settings.mode,
            width: settings.width * 2,
            height: settings.height is defined ? settings.height * 2 : 'auto',
            quality: settings.quality,
            position: settings.position,
            format: format
          } %}
          {% set mobileTransforms = mobileTransforms|merge({(key2x): transform2x}) %}
        {% endif %}
      {% endfor %}
    {% endfor %}
  {% endif %}
  
  {# Determine fallback transform #}
  {% set fallbackTransform = null %}
  {% if p.desktopImg and desktopTransforms %}
    {% set primarySize = desktopResponsive|keys|first %}
    {% set primaryFormat = configFormats|first %}
    {% set fallbackTransform = desktopTransforms[primarySize ~ '_1x_' ~ primaryFormat] ?? desktopTransforms[desktopTransforms|keys|first] %}
  {% elseif p.mobileImg and mobileTransforms %}
    {% set primarySize = mobileResponsive|keys|first %}
    {% set primaryFormat = configFormats|first %}
    {% set fallbackTransform = mobileTransforms[primarySize ~ '_1x_' ~ primaryFormat] ?? mobileTransforms[mobileTransforms|keys|first] %}
  {% endif %}

  <picture>
    {% for format in configFormats %}
      {# Desktop sources - use desktop image if available, fallback to mobile image #}
      {% if desktopResponsive %}
        {% set desktopImage = p.desktopImg ?? p.mobileImg %}
        {% set desktopTransformsToUse = desktopTransforms %}
        
        {# If no desktop transforms but we have mobile image, generate desktop transforms from mobile image #}
        {% if not desktopTransformsToUse and desktopImage and desktopResponsive %}
          {% set desktopTransformsToUse = {} %}
          {% for size, settings in desktopResponsive %}
            {% set key = size ~ '_1x_' ~ format %}
            {% set transform1x = {
              mode: settings.mode,
              width: settings.width,
              height: settings.height ?? 'auto',
              quality: settings.quality,
              position: settings.position,
              format: format
            } %}
            {% set desktopTransformsToUse = desktopTransformsToUse|merge({(key): transform1x}) %}
            
            {% if enableRetina %}
              {% set key2x = size ~ '_2x_' ~ format %}
              {% set transform2x = {
                mode: settings.mode,
                width: settings.width * 2,
                height: settings.height is defined ? settings.height * 2 : 'auto',
                quality: settings.quality,
                position: settings.position,
                format: format
              } %}
              {% set desktopTransformsToUse = desktopTransformsToUse|merge({(key2x): transform2x}) %}
            {% endif %}
          {% endfor %}
        {% endif %}
        
        {% if desktopImage and desktopTransformsToUse %}
          {% set srcsetItems = [] %}
          {% for size, settings in desktopResponsive %}
            {% set transform1x = desktopTransformsToUse[size ~ '_1x_' ~ format] %}
            {% set srcsetItems = srcsetItems|merge([desktopImage.getUrl(transform1x) ~ ' ' ~ transform1x.width ~ 'w']) %}
            {% if enableRetina %}
              {% set transform2x = desktopTransformsToUse[size ~ '_2x_' ~ format] %}
              {% set srcsetItems = srcsetItems|merge([desktopImage.getUrl(transform2x) ~ ' ' ~ transform2x.width ~ 'w']) %}
            {% endif %}
          {% endfor %}
          
          <source
            type="image/{{ format }}"
            media="(min-width: {{ p.breakpoint }})"
            srcset="{{ srcsetItems|join(', ') }}"
            sizes="{{ desktopSizes }}">
        {% endif %}
      {% endif %}
      
      {# Mobile sources - use mobile image if available, fallback to desktop image #}
      {% if mobileResponsive %}
        {% set mobileImage = p.mobileImg ?? p.desktopImg %}
        {% set mobileTransformsToUse = mobileTransforms %}
        
        {# If no mobile transforms but we have desktop image, generate mobile transforms from desktop image #}
        {% if not mobileTransformsToUse and mobileImage and mobileResponsive %}
          {% set mobileTransformsToUse = {} %}
          {% for size, settings in mobileResponsive %}
            {% set key = size ~ '_1x_' ~ format %}
            {% set transform1x = {
              mode: settings.mode,
              width: settings.width,
              height: settings.height ?? 'auto',
              quality: settings.quality,
              position: settings.position,
              format: format
            } %}
            {% set mobileTransformsToUse = mobileTransformsToUse|merge({(key): transform1x}) %}
            
            {% if enableRetina %}
              {% set key2x = size ~ '_2x_' ~ format %}
              {% set transform2x = {
                mode: settings.mode,
                width: settings.width * 2,
                height: settings.height is defined ? settings.height * 2 : 'auto',
                quality: settings.quality,
                position: settings.position,
                format: format
              } %}
              {% set mobileTransformsToUse = mobileTransformsToUse|merge({(key2x): transform2x}) %}
            {% endif %}
          {% endfor %}
        {% endif %}
        
        {% if mobileImage and mobileTransformsToUse %}
          {% set srcsetItems = [] %}
          {% for size, settings in mobileResponsive %}
            {% set transform1x = mobileTransformsToUse[size ~ '_1x_' ~ format] %}
            {% set srcsetItems = srcsetItems|merge([mobileImage.getUrl(transform1x) ~ ' ' ~ transform1x.width ~ 'w']) %}
            {% if enableRetina %}
              {% set transform2x = mobileTransformsToUse[size ~ '_2x_' ~ format] %}
              {% set srcsetItems = srcsetItems|merge([mobileImage.getUrl(transform2x) ~ ' ' ~ transform2x.width ~ 'w']) %}
            {% endif %}
          {% endfor %}
          
          <source
            type="image/{{ format }}"
            srcset="{{ srcsetItems|join(', ') }}"
            sizes="{{ mobileSizes }}">
        {% endif %}
      {% endif %}
    {% endfor %}
    
    {% if fallbackTransform %}
      <img
        src="{{ primaryImg.getUrl(fallbackTransform) }}"
        class="{{ p.class }}"
      {% if p.priority %}
        fetchpriority="high"
      {% endif %}
      {% if p.lazy %}
        loading="lazy"
        decoding="async"
      {% endif %}
        alt="{{ altText }}"
        width="{{ fallbackTransform.width }}"
        height="{{ fallbackTransform.height }}">
    {% endif %}
  </picture>

{% elseif p.img and p.responsive %}
  {# Single Image Mode (backward compatibility) #}
  {% set transformConfig = craft.app.config.getConfigFromFile('transforms') %}
  {% set configFormats = p.formats ?? transformConfig.formats %}
  {% set enableRetina = transformConfig.enableRetina %}
  
  {% set transforms = {} %}

  {% for format in configFormats %}
    {% for size, settings in p.responsive %}
      {% set key = size ~ '_1x_' ~ format %}
      {% set transform1x = {
        mode: settings.mode,
        width: settings.width,
        height: settings.height ?? 'auto',
        quality: settings.quality,
        position: settings.position,
        format: format
      } %}

      {% set transforms = transforms|merge({(key): transform1x}) %}
      
      {% if enableRetina %}
        {% set key2x = size ~ '_2x_' ~ format %}
        {% set transform2x = {
          mode: settings.mode,
          width: settings.width * 2,
          height: settings.height is defined ? settings.height * 2 : 'auto',
          quality: settings.quality,
          position: settings.position,
          format: format
        } %}
        
        {% set transforms = transforms|merge({(key2x): transform2x}) %}
      {% endif %}
    {% endfor %}
  {% endfor %}

  {% set primarySize = p.responsive|keys|first %}
  {% set primaryFormat = configFormats|first %}
  {% set fallbackTransform = transforms[primarySize ~ '_1x_jpg'] ?? transforms[primarySize ~ '_1x_jpeg'] ?? transforms[transforms|keys|first] %}
  {% set primaryTransform = transforms[primarySize ~ '_1x_' ~ primaryFormat] ?? transforms[transforms|keys|first] %}

  <picture>
    {% for format in configFormats %}
      {% set srcsetItems = [] %}
      {% for size, settings in p.responsive %}
        {% set transform1x = transforms[size ~ '_1x_' ~ format] %}
        {% set srcsetItems = srcsetItems|merge([p.img.getUrl(transform1x) ~ ' ' ~ transform1x.width ~ 'w']) %}
        {% if enableRetina %}
          {% set transform2x = transforms[size ~ '_2x_' ~ format] %}
          {% set srcsetItems = srcsetItems|merge([p.img.getUrl(transform2x) ~ ' ' ~ transform2x.width ~ 'w']) %}
        {% endif %}
      {% endfor %}
      
      <source
        type="image/{{ format }}"
        srcset="{{ srcsetItems|join(', ') }}"
        sizes="{{ p.sizes }}">
    {% endfor %}
    <img
      src="{{ p.img.getUrl(fallbackTransform) }}"
      class="{{ p.class }}"
    {% if p.priority %}
      fetchpriority="high"
    {% endif %}
    {% if p.lazy %}
      loading="lazy"
      decoding="async"
    {% endif %}
      alt="{{ p.alt ?? p.img.alt ?? p.img.title }}"
      width="{{ primaryTransform.width }}"
      height="{{ primaryTransform.height }}">
  </picture>
{% endif %}

