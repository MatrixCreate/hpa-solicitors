{# Megamenu-specific macro for column-based layout #}
{% macro renderMegamenu(items, navInteraction = 'hover') %}
  <ul class="nav-list nav-menu-level-1">
    {% for navItem in items %}
      {# Determine children - use includeAllChildren logic or nav children #}
      {% set children = [] %}
      {% if navItem.includeAllChildren ?? false %}
        {% set children = navItem.element.children.all() %}
      {% else %}
        {% set children = navItem.children.all() %}
      {% endif %}
      
      {% set hasChildren = children|length > 0 %}
      
      <li class="nav-item nav-item-level-1 js-nav-item-level-1 {% if hasChildren %}has-submenu{% endif %}">
        {% if navItem.className is defined and 'verbb\\navigation\\' in navItem.className and navItem.isPassive %}
          <span class="nav-item-link nav-link-level-1 js-nav-item-link nav-item-passive">
            {{ navItem.title }}
            {% if hasChildren %}
              {{ svg('@webroot/assets/icons/system/icon_chevron_right.svg')|attr({
                class: 'subnav-indicator'
              }) }}
            {% endif %}
          </span>
        {% else %}
          <a href="{{ navItem.url }}"
             class="nav-item-link nav-link-level-1 js-nav-item-link {% if navItem.url == (entry.url ?? null) %}active{% endif %}">
            {{ navItem.title }}
            {% if hasChildren %}
              {{ svg('@webroot/assets/icons/system/icon_chevron_right.svg')|attr({
                class: 'subnav-indicator'
              }) }}
            {% endif %}
          </a>
        {% endif %}
        
        {% if hasChildren %}
          <div class="nav-menu-level-2">
            <div class="megamenu-columns">
              
              {# Column 1: Level 2 items #}
              <div class="megamenu-column column-1">
                <ul class="nav-menu-level-2-list">
                  {% set columnCounter = 0 %}
                  {% for level2Item in children %}
                    {% set level2Children = [] %}
                    {% if level2Item.includeAllChildren ?? false %}
                      {% set level2Children = level2Item.element.children.all() %}
                    {% else %}
                      {% set level2Children = level2Item.children.all() %}
                    {% endif %}
                    
                    {% set hasLevel2Children = level2Children|length > 0 %}
                    {% if hasLevel2Children %}
                      {% set columnCounter = columnCounter + 1 %}
                    {% endif %}
                    
                    <li class="nav-item nav-item-level-2 js-megamenu-level-2" data-target="column-2-{{ loop.parent.loop.index }}-{{ columnCounter }}">
                      {% if hasLevel2Children %}
                        {% if navInteraction == 'hover' %}
                          <a href="{{ level2Item.url }}" class="nav-link nav-link-level-2 has-children">
                            <span>{{ level2Item.title }}</span>
                            {{ svg('@webroot/assets/icons/system/icon_chevron_right.svg') }}
                          </a>
                        {% else %}
                          <button type="button" class="nav-link nav-link-level-2 has-children">
                            <span>{{ level2Item.title }}</span>
                            {{ svg('@webroot/assets/icons/system/icon_chevron_right.svg') }}
                          </button>
                        {% endif %}
                      {% else %}
                        <a href="{{ level2Item.url }}" class="nav-link-level-2">{{ level2Item.title }}</a>
                      {% endif %}
                    </li>
                  {% endfor %}
                </ul>
              </div>
              
              {# Column 2: Level 3 items (shown when Level 2 is clicked) #}
              {% set columnCounter = 0 %}
              {% for level2Item in children %}
                {% set level2Children = [] %}
                {% if level2Item.includeAllChildren ?? false %}
                  {% set level2Children = level2Item.element.children.all() %}
                {% else %}
                  {% set level2Children = level2Item.children.all() %}
                {% endif %}
                
                {% if level2Children|length > 0 %}
                  {% set columnCounter = columnCounter + 1 %}
                  <div class="megamenu-column column-2" id="column-2-{{ loop.parent.loop.index }}-{{ columnCounter }}">
                    <ul class="nav-menu-level-3">
                      {# Add 'View [page title]' link for click interaction mode #}
                      <li class="nav-item nav-item-view-page" data-interaction-dependent="click">
                        <a href="{{ level2Item.url }}" class="nav-link nav-link-level-3 nav-link-view-page">
                          View {{ level2Item.title }}
                        </a>
                      </li>
                      {% for level3Item in level2Children %}
                        {% set level3Children = [] %}
                        {% if level3Item.includeAllChildren ?? false %}
                          {% set level3Children = level3Item.element.children.all() %}
                        {% else %}
                          {% set level3Children = level3Item.children.all() %}
                        {% endif %}
                        
                        {% set hasLevel3Children = level3Children|length > 0 %}
                        
                        <li class="nav-item nav-item-level-3 js-megamenu-level-3" data-target="column-3-{{ loop.parent.loop.parent.loop.index }}-{{ columnCounter }}-{{ loop.index }}">
                          {% if hasLevel3Children %}
                            {% if navInteraction == 'hover' %}
                              <a href="{{ level3Item.url }}" class="nav-link nav-link-level-3 has-children">
                                <span>{{ level3Item.title }}</span>
                                {{ svg('@webroot/assets/icons/system/icon_chevron_right.svg') }}
                              </a>
                            {% else %}
                              <button type="button" class="nav-link nav-link-level-3 has-children">
                                <span>{{ level3Item.title }}</span>
                                {{ svg('@webroot/assets/icons/system/icon_chevron_right.svg') }}
                              </button>
                            {% endif %}
                          {% else %}
                            <a href="{{ level3Item.url }}" class="nav-link-level-3">{{ level3Item.title }}</a>
                          {% endif %}
                        </li>
                      {% endfor %}
                    </ul>
                  </div>
                  
                  {# Column 3: Level 4 items (shown when Level 3 is clicked) #}
                  {% for level3Item in level2Children %}
                    {% set level3Children = [] %}
                    {% if level3Item.includeAllChildren ?? false %}
                      {% set level3Children = level3Item.element.children.all() %}
                    {% else %}
                      {% set level3Children = level3Item.children.all() %}
                    {% endif %}
                    
                    {% if level3Children|length > 0 %}
                      <div class="megamenu-column column-3" id="column-3-{{ loop.parent.loop.parent.loop.index }}-{{ columnCounter }}-{{ loop.index }}">
                        <ul class="nav-menu-level-4">
                          {# Add 'View [page title]' link for click interaction mode #}
                          <li class="nav-item nav-item-view-page" data-interaction-dependent="click">
                            <a href="{{ level3Item.url }}" class="nav-link nav-link-level-4 nav-link-view-page">
                              View {{ level3Item.title }}
                            </a>
                          </li>
                          {% for level4Item in level3Children %}
                            <li class="nav-item nav-item-level-4">
                              <a href="{{ level4Item.url }}" class="nav-link nav-link-level-4">{{ level4Item.title }}</a>
                            </li>
                          {% endfor %}
                        </ul>
                      </div>
                    {% endif %}
                  {% endfor %}
                {% endif %}
              {% endfor %}
              
            </div>
          </div>
        {% endif %}
      </li>
    {% endfor %}
  </ul>
{% endmacro %}

{# Megamenu navigation component #}
<nav class="nav nav--main nav--megamenu" data-megamenu data-interaction="{{ navInteraction }}">
  {{ _self.renderMegamenu(mainNav, navInteraction) }}
  
  <script>
    document.addEventListener('DOMContentLoaded', function () {
      const nav = document.querySelector('.nav--megamenu');
      const interaction = nav.getAttribute('data-interaction');
      
      // Get all nav item links
      const navItemLinks = document.querySelectorAll('.nav--megamenu .nav-item-link');
      
      if (interaction === 'click') {
        // Helper functions for column management (shared between click and hover)
        function showColumn2(level2Item) {
          const targetId = level2Item.getAttribute('data-target');
          console.log('showColumn2 called with target:', targetId);
          
          // Find the megamenu container this item belongs to
          const megamenu = level2Item.closest('.nav-menu-level-2');
          if (!megamenu) {
            console.error('Could not find megamenu container');
            return;
          }
          
          // Remove active state from all level 2 items in this megamenu
          const allLevel2Items = megamenu.querySelectorAll('.nav-item-level-2');
          allLevel2Items.forEach(item => item.classList.remove('active'));
          
          // Hide all column 2 and column 3 in this megamenu
          const allColumn2 = megamenu.querySelectorAll('.column-2');
          const allColumn3 = megamenu.querySelectorAll('.column-3');
          allColumn2.forEach(col => col.classList.remove('active'));
          allColumn3.forEach(col => col.classList.remove('active'));
          
          // Show target column and activate item
          const targetColumn = document.getElementById(targetId);
          console.log('Target column found:', targetColumn);
          if (targetColumn) {
            targetColumn.classList.add('active');
            level2Item.classList.add('active');
            console.log('Activated column:', targetId);
          } else {
            console.error('Target column not found:', targetId);
          }
        }
        
        function showColumn3(level3Item) {
          const targetId = level3Item.getAttribute('data-target');
          console.log('showColumn3 called with target:', targetId);
          
          // Find the megamenu container this item belongs to
          const megamenu = level3Item.closest('.nav-menu-level-2');
          if (!megamenu) {
            console.error('Could not find megamenu container');
            return;
          }
          
          // Remove active state from all level 3 items in the current column
          const currentColumn = level3Item.closest('.column-2');
          if (currentColumn) {
            const allLevel3Items = currentColumn.querySelectorAll('.nav-item-level-3');
            allLevel3Items.forEach(item => item.classList.remove('active'));
          }
          
          // Hide all column 3 in this megamenu
          const allColumn3 = megamenu.querySelectorAll('.column-3');
          allColumn3.forEach(col => col.classList.remove('active'));
          
          // Show target column and activate item
          const targetColumn = document.getElementById(targetId);
          console.log('Target column found:', targetColumn);
          if (targetColumn) {
            targetColumn.classList.add('active');
            level3Item.classList.add('active');
            console.log('Activated column:', targetId);
          } else {
            console.error('Target column not found:', targetId);
          }
        }
        
        // Megamenu-specific column navigation
        
        // Track which Level 1 items have been clicked once
        let clickedLevel1Items = new Set();
        
        // Level 1 click handlers (show/hide main panel)
        navItemLinks.forEach(link => {
          if (link.classList.contains('nav-link-level-1')) {
            link.addEventListener('click', function (event) {
              const parent = link.parentElement;
              const isPassiveItem = link.classList.contains('nav-item-passive');
              const hasSubmenu = parent.classList.contains('has-submenu');
              
              // Only apply first-click/second-click behavior to items with submenus
              if (hasSubmenu) {
                
                // For passive items, always just show submenu (no navigation)
                if (isPassiveItem) {
                  event.preventDefault();
                  
                  // Close all other level 1 submenus
                  const siblings = parent.parentElement.children;
                  Array.from(siblings).forEach(sibling => {
                    if (sibling !== parent) {
                      sibling.classList.remove('active');
                    }
                  });
                  
                  // Show this submenu
                  parent.classList.add('active');
                  return;
                }
                
                // For non-passive items, implement first-click/second-click behavior
                if (!clickedLevel1Items.has(parent) || !parent.classList.contains('active')) {
                  // First click OR submenu is not currently visible - prevent navigation, show submenu
                  event.preventDefault();
                  
                  // Close all other level 1 submenus and reset their clicked state
                  const siblings = parent.parentElement.children;
                  Array.from(siblings).forEach(sibling => {
                    if (sibling !== parent) {
                      sibling.classList.remove('active');
                      clickedLevel1Items.delete(sibling); // Reset clicked state for other items
                    }
                  });
                  
                  // Show this submenu and mark as clicked
                  parent.classList.add('active');
                  clickedLevel1Items.add(parent);
                  
                } else {
                  // Second click AND submenu is currently visible - allow navigation
                  // Don't prevent default, let the link work normally
                  console.log('Following megamenu link on second click:', link.getAttribute('href'));
                }
              }
            });
          }
        });
        
        // Level 2 click handlers (show column 2)
        const level2Items = document.querySelectorAll('.js-megamenu-level-2');
        level2Items.forEach(item => {
          const button = item.querySelector('button');
          const link = item.querySelector('a');
          
          if (button) {
            button.addEventListener('click', function (event) {
              event.preventDefault();
              showColumn2(item);
            });
          }
        });
        
        // Level 3 click handlers (show column 3)
        const level3Items = document.querySelectorAll('.js-megamenu-level-3');
        level3Items.forEach(item => {
          const button = item.querySelector('button');
          const link = item.querySelector('a');
          
          if (button) {
            button.addEventListener('click', function (event) {
              event.preventDefault();
              showColumn3(item);
            });
          }
        });
        
        // Close submenus function
        const closeSubmenus = () => {
          const activeItems = document.querySelectorAll('.nav--megamenu .nav-item.active');
          activeItems.forEach(item => {
            item.classList.remove('active');
            
            // Reset chevron indicators when closing submenus
            const indicator = item.querySelector('.subnav-indicator');
            if (indicator) {
              indicator.style.transform = 'rotate(0deg)';
            }
            
            // Clear clicked state when closing submenus
            if (typeof clickedLevel1Items !== 'undefined') {
              clickedLevel1Items.delete(item);
            }
          });
          
          // Also close megamenu columns
          const activeColumns = document.querySelectorAll('.nav--megamenu .megamenu-column.active');
          activeColumns.forEach(col => {
            col.classList.remove('active');
          });
        };

        // Close submenus when clicking outside of the nav
        document.addEventListener('click', function (event) {
          if (!event.target.closest('.nav--megamenu')) {
            closeSubmenus();
            
            // Also clear clicked items state
            if (typeof clickedLevel1Items !== 'undefined') {
              clickedLevel1Items.clear();
            }
          }
        });

        // Close submenus on scroll with improved UX heuristic
        let isScrolling = false;
        let scrollStartPosition = window.scrollY;
        let scrollTimeout;
        
        window.addEventListener('scroll', function() {
          if (!isScrolling) {
            scrollStartPosition = window.scrollY;
            isScrolling = true;
          }

          let currentScrollPosition = window.scrollY;
          let scrollDelta = Math.abs(currentScrollPosition - scrollStartPosition);

          // Close navigation when user scrolls more than 50px and nav is active
          if (scrollDelta > 50) {
            const activeItems = document.querySelectorAll('.nav--megamenu .nav-item.active');
            if (activeItems.length > 0) {
              closeSubmenus();
              isScrolling = false;
            }
          }

          // Reset the scroll start position and flag after scrolling stops
          clearTimeout(scrollTimeout);
          scrollTimeout = setTimeout(function() {
            isScrolling = false;
          }, 150);
        }, { passive: true });
        
        // Close submenus on escape key
        document.addEventListener('keydown', function (event) {
          if (event.key === 'Escape') {
            closeSubmenus();
          }
        });
      }
      
      // Hover interactions for megamenu
      if (interaction === 'hover') {
        // Hover delay timers
        let hoverDelayTimers = new Map();
        
        // Helper function to show submenu with delay
        function showSubmenuWithDelay(navItem, delay = 150) {
          // Clear any existing timer for this item
          if (hoverDelayTimers.has(navItem)) {
            clearTimeout(hoverDelayTimers.get(navItem));
          }
          
          // Set new timer to show submenu
          const timer = setTimeout(() => {
            navItem.classList.add('active');
            
            // Rotate chevron indicator
            const indicator = navItem.querySelector('.subnav-indicator');
            if (indicator) {
              indicator.style.transform = 'rotate(90deg)';
            }
          }, delay);
          
          hoverDelayTimers.set(navItem, timer);
        }
        
        // Helper function to hide submenu with delay
        function hideSubmenuWithDelay(navItem, delay = 300) {
          // Clear any existing timer for this item
          if (hoverDelayTimers.has(navItem)) {
            clearTimeout(hoverDelayTimers.get(navItem));
          }
          
          // Set new timer to hide submenu
          const timer = setTimeout(() => {
            navItem.classList.remove('active');
            
            // Reset chevron indicator
            const indicator = navItem.querySelector('.subnav-indicator');
            if (indicator) {
              indicator.style.transform = 'rotate(0deg)';
            }
            
            // Also hide any nested active submenus and reset their active classes
            const nestedActiveItems = navItem.querySelectorAll('.nav-item.active');
            nestedActiveItems.forEach(nested => {
              nested.classList.remove('active');
              const nestedIndicator = nested.querySelector('.subnav-indicator');
              if (nestedIndicator) {
                nestedIndicator.style.transform = 'rotate(0deg)';
              }
            });
            
            // Reset megamenu column active states
            const activeColumns = navItem.querySelectorAll('.megamenu-column.active');
            activeColumns.forEach(col => {
              col.classList.remove('active');
            });
          }, delay);
          
          hoverDelayTimers.set(navItem, timer);
        }
        
        // Helper functions for megamenu column management
        function showColumn2(level2Item) {
          const targetId = level2Item.getAttribute('data-target');
          
          // Find the megamenu container this item belongs to
          const megamenu = level2Item.closest('.nav-menu-level-2');
          if (!megamenu) return;
          
          // Remove active state from all level 2 items in this megamenu
          const allLevel2Items = megamenu.querySelectorAll('.nav-item-level-2');
          allLevel2Items.forEach(item => item.classList.remove('active'));
          
          // Hide all column 2 and column 3 in this megamenu
          const allColumn2 = megamenu.querySelectorAll('.column-2');
          const allColumn3 = megamenu.querySelectorAll('.column-3');
          allColumn2.forEach(col => col.classList.remove('active'));
          allColumn3.forEach(col => col.classList.remove('active'));
          
          // Show target column and activate item
          const targetColumn = document.getElementById(targetId);
          if (targetColumn) {
            targetColumn.classList.add('active');
            level2Item.classList.add('active');
          }
        }
        
        function showColumn3(level3Item) {
          const targetId = level3Item.getAttribute('data-target');
          
          // Find the megamenu container this item belongs to
          const megamenu = level3Item.closest('.nav-menu-level-2');
          if (!megamenu) return;
          
          // Remove active state from all level 3 items in the current column
          const currentColumn = level3Item.closest('.column-2');
          if (currentColumn) {
            const allLevel3Items = currentColumn.querySelectorAll('.nav-item-level-3');
            allLevel3Items.forEach(item => item.classList.remove('active'));
          }
          
          // Hide all column 3 in this megamenu
          const allColumn3 = megamenu.querySelectorAll('.column-3');
          allColumn3.forEach(col => col.classList.remove('active'));
          
          // Show target column and activate item
          const targetColumn = document.getElementById(targetId);
          if (targetColumn) {
            targetColumn.classList.add('active');
            level3Item.classList.add('active');
          }
        }
        
        // Level 1 hover handlers for megamenu
        const level1Items = nav.querySelectorAll('.nav-item-level-1.has-submenu');
        level1Items.forEach(item => {
          const submenu = item.querySelector('.nav-menu-level-2');
          if (!submenu) return;
          
          // Create a hover area that includes both the nav item and submenu
          const hoverArea = document.createElement('div');
          hoverArea.style.position = 'absolute';
          hoverArea.style.top = '0';
          hoverArea.style.left = '0';
          hoverArea.style.right = '0';
          hoverArea.style.bottom = '0';
          hoverArea.style.pointerEvents = 'none';
          hoverArea.style.zIndex = '1';
          
          item.addEventListener('mouseenter', () => {
            showSubmenuWithDelay(item, 100);
          });
          
          item.addEventListener('mouseleave', () => {
            hideSubmenuWithDelay(item, 500);
          });
          
          submenu.addEventListener('mouseenter', () => {
            // Clear hide timer when entering submenu
            if (hoverDelayTimers.has(item)) {
              clearTimeout(hoverDelayTimers.get(item));
            }
          });
          
          submenu.addEventListener('mouseleave', () => {
            hideSubmenuWithDelay(item, 200);
          });
        });
        
        // Level 2 hover handlers for megamenu columns
        const level2Items = document.querySelectorAll('.js-megamenu-level-2');
        level2Items.forEach(item => {
          const hasChildren = item.querySelector('.has-children');
          
          if (hasChildren) {
            item.addEventListener('mouseenter', function () {
              // Small delay for column switching
              setTimeout(() => showColumn2(item), 50);
            });
          }
        });
        
        // Level 3 hover handlers for megamenu columns
        const level3Items = document.querySelectorAll('.js-megamenu-level-3');
        level3Items.forEach(item => {
          const hasChildren = item.querySelector('.has-children');
          
          if (hasChildren) {
            item.addEventListener('mouseenter', function () {
              // Small delay for column switching
              setTimeout(() => showColumn3(item), 50);
            });
          }
        });
      }
      
      // Touch device enhancements (applies to both hover and click modes)
      if ('ontouchstart' in window) {
        nav.classList.add('touch-device');
        
        // Special handling for hover interaction mode on touch devices
        if (interaction === 'hover') {
          // Track which items have been tapped once
          let tappedItems = new Set();
          
          // Handle Level 1 touch interactions
          const level1Links = nav.querySelectorAll('.nav-item-level-1 .nav-item-link');
          level1Links.forEach(link => {
            link.addEventListener('click', function(event) {
              const navItem = link.parentElement;
              const isPassiveItem = link.classList.contains('nav-item-passive');
              const hasSubmenu = navItem.classList.contains('has-submenu');
              const linkUrl = link.getAttribute('href');
              
              // Only apply first-tap/second-tap behavior to items with submenus
              if (hasSubmenu) {
                // For passive items, always just show submenu (no navigation)
                if (isPassiveItem) {
                  event.preventDefault();
                  navItem.classList.add('active');
                  return;
                }
                
                // For non-passive items, implement first-tap/second-tap behavior
                if (!tappedItems.has(navItem)) {
                // Prevent navigation on first tap
                event.preventDefault();
                
                // Mark as tapped
                tappedItems.add(navItem);
                
                // Show the submenu
                navItem.classList.add('active');
                
                // Clear the tapped status after 3 seconds of inactivity
                setTimeout(() => {
                  if (!navItem.matches(':hover') && !navItem.querySelector('.nav-menu-level-2:hover')) {
                    tappedItems.delete(navItem);
                  }
                }, 3000);
              } else {
                // Second tap - allow navigation
                // Let the link work normally (don't prevent default)
                console.log('Following link on second tap:', linkUrl);
              }
              }
              // Items without submenus navigate immediately (no special touch handling needed)
            });
          });
          
          // Handle megamenu Level 2 and Level 3 touch interactions
          // Level 2 megamenu items
          const level2Links = nav.querySelectorAll('.js-megamenu-level-2 .nav-link-level-2');
          level2Links.forEach(link => {
            if (link.classList.contains('has-children')) {
              link.addEventListener('click', function(event) {
                const navItem = link.parentElement;
                
                if (!tappedItems.has(navItem)) {
                  // First tap - show column, prevent navigation
                  event.preventDefault();
                  tappedItems.add(navItem);
                  
                  // Trigger column display
                  const targetId = navItem.getAttribute('data-target');
                  const targetColumn = document.getElementById(targetId);
                  if (targetColumn) {
                    // Clear other columns first
                    const megamenu = navItem.closest('.nav-menu-level-2');
                    if (megamenu) {
                      megamenu.querySelectorAll('.column-2, .column-3').forEach(col => {
                        col.classList.remove('active');
                      });
                      megamenu.querySelectorAll('.nav-item-level-2, .nav-item-level-3').forEach(item => {
                        item.classList.remove('active');
                      });
                    }
                    
                    // Show target column
                    targetColumn.classList.add('active');
                    navItem.classList.add('active');
                  }
                  
                  // Clear tapped status after delay
                  setTimeout(() => tappedItems.delete(navItem), 3000);
                }
                // Second tap - allow navigation (don't prevent default)
              });
            }
          });
          
          // Level 3 megamenu items
          const level3Links = nav.querySelectorAll('.js-megamenu-level-3 .nav-link-level-3');
          level3Links.forEach(link => {
            if (link.classList.contains('has-children')) {
              link.addEventListener('click', function(event) {
                const navItem = link.parentElement;
                
                if (!tappedItems.has(navItem)) {
                  // First tap - show column, prevent navigation
                  event.preventDefault();
                  tappedItems.add(navItem);
                  
                  // Trigger column display
                  const targetId = navItem.getAttribute('data-target');
                  const targetColumn = document.getElementById(targetId);
                  if (targetColumn) {
                    // Clear other level 3 columns first
                    const megamenu = navItem.closest('.nav-menu-level-2');
                    if (megamenu) {
                      megamenu.querySelectorAll('.column-3').forEach(col => {
                        col.classList.remove('active');
                      });
                      megamenu.querySelectorAll('.nav-item-level-3').forEach(item => {
                        item.classList.remove('active');
                      });
                    }
                    
                    // Show target column
                    targetColumn.classList.add('active');
                    navItem.classList.add('active');
                  }
                  
                  // Clear tapped status after delay
                  setTimeout(() => tappedItems.delete(navItem), 3000);
                }
                // Second tap - allow navigation (don't prevent default)
              });
            }
          });
          
          // Reset tapped items when user taps elsewhere
          document.addEventListener('click', function(event) {
            if (!event.target.closest('.nav--megamenu')) {
              tappedItems.clear();
            }
          });
        }
      }
    });
  </script>
</nav>