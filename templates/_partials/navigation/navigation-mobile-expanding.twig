{# Recursive macro for expanding mobile navigation #}
{% macro renderMobileNavLevel(items, level = 1) %}
  {% set levelClass = 'mobile-nav-level-' ~ level %}
  {% set itemClass = 'mobile-nav-item-level-' ~ level %}
  {% set linkClass = 'mobile-nav-link-level-' ~ level %}
  
  <ul class="mobile-nav-list mobile-nav-level-{{ level }} {{ levelClass }}">
    {% for navItem in items %}
      {# Determine children - use includeAllChildren logic or nav children #}
      {% set children = [] %}
      {% if navItem.includeAllChildren ?? false %}
        {# Use actual entry children when includeAllChildren is enabled #}
        {% set children = navItem.element.children.all() %}
      {% else %}
        {# Use navigation plugin children #}
        {% set children = navItem.children.all() %}
      {% endif %}
      
      {% set hasChildren = children|length > 0 %}
      {% set itemId = 'mobile-nav-' ~ navItem.id ~ '-level-' ~ level %}
      {% set isFirstLevelPassive = level == 1 and loop.first and navItem.className is defined and 'verbb\\navigation\\' in navItem.className and navItem.isPassive %}
      
      <li class="mobile-nav-item {{ itemClass }} {% if hasChildren %}has-submenu{% endif %} {% if isFirstLevelPassive %}first-level-passive{% endif %}" 
          x-data="{ expanded: false }"
          :class="{ 'active': expanded }">
        
        <div class="mobile-nav-item-header {% if isFirstLevelPassive and hasChildren %}clickable-header{% endif %}" 
             :class="{ 'active': expanded }"
             {% if isFirstLevelPassive and hasChildren %}@click="expanded = !expanded"{% endif %}>
          {# Passive items render as spans, others as links #}
          {% if navItem.className is defined and 'verbb\\navigation\\' in navItem.className and navItem.isPassive %}
            <span class="mobile-nav-link {{ linkClass }} mobile-nav-passive">
              <span class="mobile-nav-link-text">
                {{ navItem.title }}
              </span>
            </span>
          {% else %}
            <a href="{{ navItem.url }}" 
               class="mobile-nav-link {{ linkClass }} {% if navItem.url == (entry.url ?? null) %}active{% endif %}">
              <span class="mobile-nav-link-text">
                {{ navItem.title }}
              </span>
            </a>
          {% endif %}
          
          {# Expand/collapse button for items with children #}
          {% if hasChildren %}
            <button type="button" 
                    class="mobile-nav-toggle"
                    {% if not isFirstLevelPassive %}@click="expanded = !expanded"{% else %}@click.stop="expanded = !expanded"{% endif %}
                    :aria-expanded="expanded.toString()"
                    aria-label="Toggle {{ navItem.title }} submenu">
              <span class="mobile-nav-toggle-icon" :class="{ 'rotate-90': expanded }">
                {{ svg('@webroot/assets/icons/system/icon_chevron_right.svg')|attr({
                  class: 'mobile-nav-toggle-icon-svg'
                }) }}
              </span>
            </button>
          {% endif %}
        </div>
        
        {# Recursive submenu rendering #}
        {% if hasChildren %}
          <div class="mobile-nav-submenu" 
               :class="{ 'expanded': expanded }">
            {{ _self.renderMobileNavLevel(children, level + 1) }}
          </div>
        {% endif %}
      </li>
    {% endfor %}
  </ul>
{% endmacro %}

{# Mobile expanding navigation component #}
<div class="mobile-nav-container relative"
     x-data="{ navOpen: false }"
     @keydown.escape.window="navOpen = false">

  {# Menu Button #}
  <button class="btn-menu" 
          type="button" 
          aria-controls="mobile-navigation" 
          :aria-expanded="navOpen.toString()" 
          @click="navOpen = !navOpen">
    
    {# Menu Icon #}
    {{ svg('@webroot/assets/icons/system/icon_menu.svg')|attr({
      class: 'menu-icon',
      'x-show': '!navOpen',
      'x-cloak': true
    }) }}

    {# Close Icon #}
    {{ svg('@webroot/assets/icons/system/icon_close.svg')|attr({
      class: 'menu-close-icon',
      'x-show': 'navOpen',
      'x-cloak': true
    }) }}
    
    <span class="sr-only">Menu</span>
  </button>

  {# Mobile Navigation Panel #}
  <nav class="mobile-nav"
       id="mobile-navigation"
       x-show="navOpen"
       x-transition:enter="transition ease-out duration-300"
       x-transition:enter-start="opacity-0 transform -translate-x-full"
       x-transition:enter-end="opacity-100 transform translate-x-0"
       x-transition:leave="transition ease-in duration-200"
       x-transition:leave-start="opacity-100 transform translate-x-0"
       x-transition:leave-end="opacity-0 transform -translate-x-full">
    
    <div class="mobile-nav-content">
      
      {# Main Navigation Tree #}
      <div class="mobile-nav-main">
        {{ _self.renderMobileNavLevel(mobileMainNav) }}
      </div>
      
      {# Additional Content/Actions #}
      {% if siteConfig.showTelephoneInMobileNav and siteConfig.telephone is defined and siteConfig.telephone %}
        <div class="mobile-nav-actions">
          <a href="tel:{{ siteConfig.telephone|replace(' ', '') }}" 
             class="mobile-nav-cta">
            {{ svg('@webroot/assets/icons/system/icon_telephone.svg')|attr({
              class: 'w-5 h-5'
            }) }}
            {{ siteConfig.telephone }}
          </a>
        </div>
      {% endif %}
    </div>
  </nav>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Mobile navigation global effects
  function toggleMobileNavEffects(isOpen) {
    const html = document.html;
    const body = document.body;
    
    if (isOpen) {
      body.classList.add('mobile-nav-open');
      html.classList.add('mobile-nav-open');
    } else {
      body.classList.remove('mobile-nav-open');
      html.classList.remove('mobile-nav-open');
    }
  }
  
  // Watch for Alpine.js nav state changes on expanding navigation
  const expandingContainer = document.querySelector('.mobile-nav-container');
  if (expandingContainer) {
    const menuButton = expandingContainer.querySelector('.btn-menu');
    
    if (menuButton) {
      menuButton.addEventListener('click', function() {
        // Small delay to let Alpine update
        setTimeout(() => {
          const nav = expandingContainer.querySelector('.mobile-nav');
          const isOpen = nav && nav.style.display !== 'none' && !nav.hasAttribute('x-cloak');
          
          // More reliable: check Alpine data
          const alpineData = expandingContainer._x_dataStack?.[0];
          if (alpineData) {
            toggleMobileNavEffects(alpineData.navOpen);
          }
        }, 50);
      });
    }
    
    // Close navigation on window resize
    window.addEventListener('resize', function() {
      const alpineData = expandingContainer._x_dataStack?.[0];
      if (alpineData && alpineData.navOpen) {
        alpineData.navOpen = false;
        toggleMobileNavEffects(false);
      }
    });
    
    // Also watch for escape key and backdrop clicks
    document.addEventListener('keydown', function(e) {
      if (e.key === 'Escape') {
        const alpineData = expandingContainer._x_dataStack?.[0];
        if (alpineData) {
          alpineData.navOpen = false;
          toggleMobileNavEffects(false);
        }
      }
    });
    
    // Close navigation when clicking on .main
    const mainElement = document.querySelector('.main');
    if (mainElement) {
      mainElement.addEventListener('click', function() {
        const alpineData = expandingContainer._x_dataStack?.[0];
        if (alpineData && alpineData.navOpen) {
          alpineData.navOpen = false;
          toggleMobileNavEffects(false);
        }
      });
    }
  }
});
</script></div>